# Generated by Django 5.1 on 2024-10-06 13:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fname', models.CharField(blank=True, max_length=50, null=True)),
                ('lname', models.CharField(blank=True, max_length=50, null=True)),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fname', models.CharField(blank=True, max_length=50, null=True)),
                ('lname', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('gender', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True)),
                ('admin_permissions', models.ManyToManyField(blank=True, related_name='admin_permissions_set', to='auth.permission')),
                ('groups', models.ManyToManyField(blank=True, related_name='admin_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate_no', models.CharField(blank=True, max_length=50, null=True)),
                ('sideno', models.CharField(blank=True, max_length=50, null=True)),
                ('no_seats', models.CharField(max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='bus_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='bus_permissions_set', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Buschange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_side_no', models.CharField(blank=True, max_length=50, null=True)),
                ('new_plate_no', models.CharField(blank=True, max_length=50, null=True)),
                ('depcity', models.CharField(blank=True, max_length=50, null=True)),
                ('descity', models.CharField(blank=True, max_length=50, null=True)),
                ('date', models.CharField(blank=True, max_length=50, null=True)),
                ('side_no', models.CharField(blank=True, max_length=20, null=True)),
                ('plate_no', models.CharField(blank=True, max_length=20, null=True)),
                ('buschange_permissions', models.ManyToManyField(blank=True, related_name='buschange_permissions_set', to='auth.permission')),
                ('groups', models.ManyToManyField(blank=True, related_name='buschange_set', to='auth.group')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depcity', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='city_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='city_permissions_set', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Fedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('message', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='fedback_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='fedback_permissions_set', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depcity', models.CharField(blank=True, max_length=50, null=True)),
                ('descity', models.CharField(blank=True, max_length=50, null=True)),
                ('kilometer', models.CharField(blank=True, max_length=50, null=True)),
                ('price', models.CharField(blank=True, max_length=50, null=True)),
                ('date', models.CharField(blank=True, max_length=50, null=True)),
                ('plate_no', models.CharField(blank=True, max_length=50, null=True)),
                ('side_no', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='route_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='route_permissions_set', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(blank=True, max_length=50, null=True)),
                ('lastname', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('depcity', models.CharField(blank=True, max_length=50, null=True)),
                ('descity', models.CharField(blank=True, max_length=50, null=True)),
                ('date', models.CharField(blank=True, max_length=50, null=True)),
                ('no_seat', models.CharField(blank=True, max_length=20, null=True)),
                ('price', models.CharField(blank=True, max_length=50, null=True)),
                ('side_no', models.CharField(blank=True, max_length=20, null=True)),
                ('plate_no', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='ticket_set', to='auth.group')),
                ('worker_permissions', models.ManyToManyField(blank=True, related_name='ticket_permissions_set', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fname', models.CharField(blank=True, max_length=50, null=True)),
                ('lname', models.CharField(blank=True, max_length=50, null=True)),
                ('username', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('side_no', models.CharField(blank=True, max_length=50, null=True)),
                ('plate_no', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='worker_set', to='auth.group')),
                ('worker_permissions', models.ManyToManyField(blank=True, related_name='worker_permissions_set', to='auth.permission')),
            ],
        ),
    ]
